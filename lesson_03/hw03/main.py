import time
from pprint import pprint

# -------------------------------
# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Å—Ç–µ–ø–µ–Ω—å
# -------------------------------
def powers(*args, power=2):
    return [x ** power for x in args]

# -------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
# -------------------------------
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# -------------------------------
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –ø–æ —Ç–∏–ø—É
# -------------------------------
def filter_numbers(numbers, mode='even'):
    if mode == 'even':
        return [x for x in numbers if x % 2 == 0]
    elif mode == 'odd':
        return [x for x in numbers if x % 2 != 0]
    elif mode == 'prime':
        return [x for x in numbers if is_prime(x)]
    else:
        raise ValueError("mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 'even', 'odd' –∏–ª–∏ 'prime'")

# -------------------------------
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
# -------------------------------
def timing(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"‚è± –§—É–Ω–∫—Ü–∏—è '{func.__name__}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {end - start:.6f} —Å–µ–∫—É–Ω–¥")
        return result
    return wrapper

# -------------------------------
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
# -------------------------------
def trace(func):
    indent = "  "
    level = 0

    def wrapper(n):
        nonlocal level
        print(f"{indent * level}--> {func.__name__}({n})")
        level += 1
        result = func(n)
        level -= 1
        print(f"{indent * level}<-- {func.__name__}({n}) == {result}")
        return result
    return wrapper

# -------------------------------
# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –§–∏–±–æ–Ω–∞—á—á–∏
# -------------------------------
@trace
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)



# -------------------------------
# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
# -------------------------------
if __name__ == '__main__':
    print("üîπ –°–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª:")
    pprint(powers(2, 3, 4, 5))

    print("\nüîπ –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≤–æ–∑–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤ 3-—é —Å—Ç–µ–ø–µ–Ω—å:")
    pprint(powers(2, 3, 4, 5, power=3))

    sample_list = list(range(1, 20))

    print("\nüîπ –ß—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞:")
    pprint(filter_numbers(sample_list, mode="even"))

    print("\nüîπ –ù–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞:")
    pprint(filter_numbers(sample_list, mode="odd"))

    print("\nüîπ –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞:")
    pprint(filter_numbers(sample_list, mode="prime"))

    print("\nüîπ –§–∏–±–æ–Ω–∞—á—á–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏ (–¥–æ 5):")
    fibonacci(5)

    print("\nüîπ –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:")

    @timing
    def test_powers():
        return powers(*range(1, 10_000))


    test_powers()